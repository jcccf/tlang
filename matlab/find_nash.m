function pNash = find_nash(follows, langs, logt, constants, global_k, p0)
%% Find Nash (Takes a long time..)
% Somehow, starting from original proportions lead to numerical problems
% Better to start with SW opt or random.

[n,m] = size(follows);
if nargin >= 6
    pNash = p0(1:n);
else
    pNash = 0.5*ones(n,1);
end

options = optimset('Display','iter',...
    ...'Algorithm','levenberg-marquardt',...
    'Algorithm','trust-region-reflective',...
    ...'Algorithm','trust-region-dogleg',...
    ...'MaxFunEvals',2000,...
    'MaxIter',15,...
    'Jacobian','on',...
    ...'DerivativeCheck','on',...
    'Diagnostics','on');

% [pNash,fval2,exitflag2,output2] = fsolve( ...
%     @(p)NashCondition(p, follows, langs, logt), ...
%     p0(1:n), options);

[pNash,fval2,exitflag2,output2] = lsqnonlin( ...
    @(p)NashCondition(p, follows, langs, logt, constants, global_k), ...
    pNash, zeros(n,1), ones(n,1), options);
    ...pNash, [], [], options);

% options = optimset('GradObj','on','Display','iter',...
%                 ...'DerivativeCheck','on',...
%                 'Hessian','lbfgs',...
%                 'MaxIter',5,...
%                 'Algorithm','interior-point'...
%                 ...'Algorithm','active-set'...
%                 );
% [pNash,fval2,exitflag2,output2] = fmincon( ...
%     @(p)NashCondition2(p, follows, langs, logt, constants, global_k), ...
%     pNash, ...
%     [],[],[],[], ...
%     zeros(n,1),ones(n,1), ...
%     [], options);

end